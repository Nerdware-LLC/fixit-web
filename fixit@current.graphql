type Query {
  _root: Boolean
  contact(contactID: ID!): Contact!
  myContacts: [Contact]!
  invoice(invoiceID: ID!): Invoice!
  myInvoices: MyInvoicesQueryReturnType!
  myProfile: Profile!
  profile(profileID: ID!): Profile!
  user: User!
  mySubscription: UserSubscription!
  workOrder(workOrderID: ID!): WorkOrder!
  myWorkOrders: MyWorkOrdersQueryReturnType!
  searchUsers(rawPhoneContacts: [RawPhoneContactInput!]!): [PhoneContact]
}

type Mutation {
  _root: Boolean
  createContact(contactEmail: Email!): Contact!
  deleteContact(contactEmail: Email!): DeleteMutationResponse!
  createInvoice(invoice: InvoiceInput!): Invoice!
  updateInvoiceAmount(invoiceID: ID!, amount: Int!): Invoice!
  payInvoice(invoiceID: ID!): Invoice!
  deleteInvoice(invoiceID: ID!): DeleteMutationResponse!
  updateProfile(profile: ProfileInput!): Profile!
  createWorkOrder(workOrder: CreateWorkOrderInput!): WorkOrder!
  updateWorkOrder(workOrderID: ID!, workOrder: UpdateWorkOrderInput!): WorkOrder!
  cancelWorkOrder(workOrderID: ID!): CancelWorkOrderResponse!
  setWorkOrderStatusComplete(workOrderID: ID!): WorkOrder!
}

"""Custom DateTime scalar; pass a string or js date instance obj"""
scalar DateTime

"""Custom Email scalar; validates using regex"""
scalar Email

type DeleteMutationResponse {
  id: ID!
  wasDeleted: Boolean!
}

"""
FixitUser is an interface which defines publicly-accessible User fields.
This interface has two concrete implementations: Contact, which is simply
a concrete implementation of the same publicly-available fields, and User,
which adds private fields which are not publicly accessible to other users.
"""
interface FixitUser {
  """User ID internally identifies individual User accounts"""
  id: ID!

  """Public-facing handle identifies users to other users (e.g., "@joe")"""
  handle: String!

  """Email address of either a User or Contact"""
  email: Email!

  """Phone number of either a User or Contact"""
  phone: String!

  """Profile object of either a User or Contact"""
  profile: Profile!
}

"""
Contact is a type which is simply a concrete implementation of the
publicly accessible User fields defined in the FixitUser interface.
The Contact type is meant to ensure that private User fields are
not available to anyone other than the User who owns the data.
"""
type Contact implements FixitUser {
  """User ID internally identifies individual User accounts"""
  id: ID!

  """Public-facing handle identifies users to other users (e.g., "@joe")"""
  handle: String!

  """Contact email address"""
  email: Email!

  """Contact phone number"""
  phone: String!

  """Contact Profile object"""
  profile: Profile!
}

type Invoice {
  id: ID!
  createdBy: FixitUser!
  assignedTo: FixitUser!
  amount: Int!
  status: InvoiceStatus!
  stripePaymentIntentID: String
  workOrder: WorkOrder
  createdAt: DateTime!
}

enum InvoiceStatus {
  OPEN
  CLOSED
  DISPUTED
}

type MyInvoicesQueryReturnType {
  createdByUser: [Invoice!]!
  assignedToUser: [Invoice!]!
}

input InvoiceInput {
  assignedToUserID: ID!
  amount: Int!
  workOrderID: ID
}

type Profile {
  displayName: String
  givenName: String
  familyName: String
  businessName: String
  photoUrl: String
}

input ProfileInput {
  givenName: String
  familyName: String
  businessName: String
  photoUrl: String
}

type UserStripeConnectAccount {
  id: ID!
  detailsSubmitted: Boolean!
  chargesEnabled: Boolean!
  payoutsEnabled: Boolean!
}

"""
User is an implementation of the FixitUser interface which includes
both the publicly-accessible FixitUser/Contact fields as well as
private fields which are only available to the user which created
the account.
"""
type User implements FixitUser {
  """User ID internally identifies individual User accounts"""
  id: ID!

  """Public-facing handle identifies users to other users (e.g., "@joe")"""
  handle: String!

  """User's own email address"""
  email: Email!

  """User's own phone number"""
  phone: String!

  """User's own Profile object"""
  profile: Profile!

  """User's Stripe Customer ID (defined and generated by Stripe)"""
  stripeCustomerID: String!

  """User Subscription info"""
  subscription: UserSubscription

  """User Stripe Connect Account info"""
  stripeConnectAccount: UserStripeConnectAccount

  """Account creation timestamp"""
  createdAt: DateTime!
}

type UserSubscription {
  id: ID!
  currentPeriodEnd: DateTime!
  productID: String!
  priceID: String!
  status: SubscriptionStatus!
  createdAt: DateTime!
}

enum SubscriptionStatus {
  active
  incomplete
  incomplete_expired
  trialing
  past_due
  canceled
  unpaid
}

type WorkOrder {
  id: ID!
  createdBy: FixitUser!
  assignedTo: FixitUser
  status: WorkOrderStatus!
  priority: WorkOrderPriority!
  location: WorkOrderLocation!
  category: WorkOrderCategory
  description: String!
  checklist: [ChecklistItem]
  dueDate: DateTime
  entryContact: String
  entryContactPhone: String
  scheduledDateTime: DateTime
  contractorNotes: String
  createdAt: DateTime!
}

enum WorkOrderStatus {
  UNASSIGNED
  ASSIGNED
  CANCELLED
  COMPLETE
}

enum WorkOrderPriority {
  LOW
  NORMAL
  HIGH
}

enum WorkOrderCategory {
  DRYWALL
  ELECTRICAL
  FLOORING
  GENERAL
  HVAC
  LANDSCAPING
  MASONRY
  PAINTING
  PAVING
  PEST
  PLUMBING
  ROOFING
  TRASH
  TURNOVER
  WINDOWS
}

type WorkOrderLocation {
  country: String
  region: String!
  city: String!
  streetLine1: String!
  streetLine2: String
}

type ChecklistItem {
  id: ID!
  description: String!
  isCompleted: Boolean!
}

type MyWorkOrdersQueryReturnType {
  createdByUser: [WorkOrder!]!
  assignedToUser: [WorkOrder!]!
}

input CreateWorkOrderInput {
  assignedToUserID: ID
  priority: WorkOrderPriority
  location: CreateWorkOrderLocationInput!
  category: WorkOrderCategory
  description: String!
  checklist: [CreateChecklistItemInput]
  dueDate: DateTime
  entryContact: String
  entryContactPhone: String
  scheduledDateTime: DateTime
}

input CreateWorkOrderLocationInput {
  country: String
  region: String!
  city: String!
  streetLine1: String!
  streetLine2: String
}

input CreateChecklistItemInput {
  description: String!
}

input UpdateWorkOrderInput {
  assignedToUserID: ID
  priority: WorkOrderPriority
  location: UpdateWorkOrderLocationInput
  category: WorkOrderCategory
  description: String
  checklist: [UpdateChecklistItemInput]
  dueDate: DateTime
  entryContact: String
  entryContactPhone: String
  scheduledDateTime: DateTime
}

input UpdateWorkOrderLocationInput {
  country: String
  region: String
  city: String
  streetLine1: String
  streetLine2: String
}

input UpdateChecklistItemInput {
  id: ID
  description: String!
  isCompleted: Boolean
}

union CancelWorkOrderResponse = WorkOrder | DeleteMutationResponse

type PhoneContact {
  isUser: Boolean!
  id: String!
  handle: String
  phone: String
  email: Email
  profile: Profile!
}

input RawPhoneContactInput {
  id: String!
  name: String
  phone: String
  email: String
  photoUrl: String
}